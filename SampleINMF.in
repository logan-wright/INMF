### Sample INMF Input Files
# Include the name of the scene, this will be used to name the output plots and
# results

name = HICO_TestSceneSanFranBay

# Include the filepath and name of scene
file = Data/H2014050221301.L1B_ISS

# Path to the endmember data file (Currently needs to be a MATLAB save file [.mat])
endmember_file = Data/H2014050221301_HICO_REFL.mat

# Name the types of endmember you want to use to initialize the INMF, should be
# a comma separated list

members = Vegetation, Water, Soil, Cloud, Atmosphere
SZA = 36.79
SunElliptic = 1.00787

# Ending Conditions
max_i = 25

# max_i: Maximum number of iterations to use (If max_i is less than 10 the
#        default value of 500 iterations will be used)

epsilon = 0

# epsilon: If cost function change is less than this value iteration stops
#          (value <= 0 will use default value)

# Normalization
# none, (No Normalization):
#		No normalization is applied. Units are default calibrated radiance.
#   norm = none
#
# aso, (Abundance-Sum-to-One):
#		Normalizes abundances to sum to one resulting in a fractional
#       representation. This is a 'soft' constraint so the abundances will not
#       sum exactly to one and may be larger or smaller. If this normalization
#       is used several addition settings are needed: delta and aso_vec.
#           'delta' controls how closely to one the abundances sum, larger delta
#               values result in sums closer to one.
#           'aso_vec' is a boolean vector that determines which endmembers are
#               included in the sum to one. If all values are 1 all endmembers
#               are included, endmembers set to 0 are ignored in the sum. We've
#               found that it may be best to not include atmospheric sources
#               (i.e. molecular or aerosol scattering) in the sum.
#   norm = aso
#   delta = 100
#   aso_vec = 1,1,1,1,0
#
# refl, (Reflectance):
#		Converts HICO's calibrated radiance to top-of-atmosphere reflectance
#       using a solar irradiance spectrum.
#           refl_data(wvl) = 2*pi*(HICORadiances(wvl))/(TOASolarIrradiance(wvl))
#   norm = refl
#
# pixel, (Weight by Spatial Pixel):
#       Weights the cost from each pixel inversely-proportionally to the mean
#       signal over all wavelengths in the pixel. So that errors from very
#       bright pixels does not completely drown out the errors from darker
#       pixels.
#           weight(pixel) = 1/(mean(HICORadiances(pixel,ALL_WAVELENGTHS)))
#   norm = pixel
#
# spectral, (Weight by Wavelength):
#       Similar to pixel weight but weights the cost from each wavelength
#       inversely-proportionally to the mean signal at the wavelength over all
#       pixels. So that errors from higher mean value wavelengths (like shorter
#       wavelengths, i.e. 400nm) don' not completely drown out the errors from
#       lower signal wavelength.
#           weight(wvl) = 1/(mean(HICORadiances(wvl,ALL_PIXELS)))
#   norm = spectral

norm = spectral
delta = 100
aso_vec = 1,1,1,1,0

# Constraints - Set Yes or No
smooth_spectral = Yes
smooth_spatial = Yes

# The following: spectral_win, spectral_strength, spectral_gamma, spatial_win,
#                spatial_strength, spatial_gammma
#
# are only need if Smooth_Spectral or Smooth_Spatial are set to YES.
#
# spectral_win and spatial_win:
#    Set the window over which smoothing is applied. Value must be an integer or a
#    vector of N integers (where N is the number of endmembers). Values must be odd and >= 1.
# Default Values:
#   spectral_win = 11, 11, 11, 11, 11
#   spatial_win = 5, 5, 5, 5, 11

spectral_win = 11, 11, 11, 11, 11
spatial_win = 5, 5, 5, 5, 11

# spectral_strength and spatial_strength:
#    Are the alpha and beta values in the INMF cost function, scaling the
#    weight of the smoothing in the total cost function. If no value is given
#    default values are used.
# Default Values:
#	spectral_strength = 0.5
#	spatial_strength = 0.1

spectral_strength = 0.5
spatial_strength = 0.1

# spectral_gamma and spatial_gamma:
#    Are the gamma_w (y_w) and gamma_h (y_h) values in the INMF cost function.
#    These values determine how quickly the smoothing function falls off from
#    the center of the window. If no value is given default values are used.
# Default Values:
#	spectral_gammma = 0.01
#	spatial_gamma = 0.5

spectral_gamma = 0.01
spatial_gamma = 0.5

# Optional Inputs,
#    roi - Can be used to subset the scene. Must be a set of 4 indices
#          representing a square region from the image
#    wvl_rng - Can be used to select a subset of the wavelength range, first
#              value is a minimum wavelengh and the second is the maximum
#              (values are in nanometers)

roi = 100,200,101,201
wvl_rng = 9,96
